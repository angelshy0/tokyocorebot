# –ö–æ—Å—Ç—ã–ª—å –¥–ª—è –æ–±—Ö–æ–¥–∞ –æ—à–∏–±–∫–∏ imghdr
import sys
import mimetypes
sys.modules['imghdr'] = mimetypes

import logging
import sqlite3
import json
import io
from PIL import Image, ImageDraw, ImageFont
import telegram
import os
from telegram import Update, InputFile, KeyboardButton, ReplyKeyboardMarkup
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, CallbackContext

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="‚ñÆ‚ñ†‚ñÆ TOKYO CORE [%(asctime)s] ‚ñ†‚ñÆ‚ñÆ\n%(levelname)s: %(message)s", 
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –ö–æ–Ω—Ñ
TOKEN = ""
ADMIN_ID = 12345678
CONFIG_ID = 123
DB_NAME = "TokyoCore.db"

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –ì–õ–û–ë–ê–õ–¨–ù–û
conn = sqlite3.connect(DB_NAME, check_same_thread=False)
cursor = conn.cursor()
cursor.execute(
    """CREATE TABLE IF NOT EXISTS users 
       (chatid INTEGER PRIMARY KEY, name TEXT, volts INTEGER, rank TEXT)"""
)
conn.commit()
RANKS = {
    # –£—á–µ–Ω–∏–∫–∏ –∏ –Ω–æ–≤–∏—á–∫–∏
    "owner": "–°–æ–∑–¥–∞—Ç–µ–ª—å",
    
    # –ë–∞–∑–æ–≤—ã–µ —Ä–∞–Ω–≥–∏
    "user": "–£—á–µ–Ω–∏–∫",
    "friend": "–î—Ä—É–∑—å—è",
    "tester": "–¢–µ—Å—Ç–µ—Ä",

    # –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ
    "admin": "–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä",
    "legend": "–õ–µ–≥–µ–Ω–¥–∞"
    
}


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from telegram.error import BadRequest

def backup_data(context: CallbackContext):
    global CONFIG_ID, conn, cursor
    try:
        cursor.execute("SELECT * FROM users")
        data = cursor.fetchall()
        json_data = json.dumps(data).encode()
        
        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ CONFIG_ID —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        try:
            context.bot.delete_message(ADMIN_ID, CONFIG_ID)
        except BadRequest:
            logger.warning("–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –ü—Ä–æ–ø—É—Å–∫.")
        
        file = InputFile(io.BytesIO(json_data), filename="backup.json")
        msg = context.bot.send_document(ADMIN_ID, document=file)
        CONFIG_ID = msg.message_id
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        
        
def generate_volts_image(user_name: str, volts: int, rank: str) -> io.BytesIO:
    try:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        img = Image.open("core_bg.png").convert("RGBA")
        img = img.resize((1280, 720))
    except Exception as e:
        # Fallback –Ω–∞ —á–µ—Ä–Ω—ã–π —Ñ–æ–Ω
        img = Image.new('RGBA', (1280, 720), (0, 0, 0, 255))
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–æ–Ω–∞: {e}")

    draw = ImageDraw.Draw(img)
    
    # –°—Ç–∏–ª–∏ —Ç–µ–∫—Å—Ç–∞
    text_style = {
        "title": {"size": 72, "color": (0, 255, 255), "position": (180, 120)},
        "volts": {"size": 64, "color": (255, 50, 150), "position": (180, 280)},
        "rank": {"size": 68, "color": (150, 255, 50), "position": (180, 450)}
    }

    # –ó–∞–≥—Ä—É–∑–∫–∞ —à—Ä–∏—Ñ—Ç–∞
    try:
        cyber_font = ImageFont.truetype("cyber.ttf", 72)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —à—Ä–∏—Ñ—Ç–∞: {e}")
        cyber_font = ImageFont.load_default()

    # –ì–ª–∏—Ç—á-—ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è –∑–∞–≥–æ–ª–æ–≤–∫–∞

    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
    texts = [
        f"OPERATOR: {user_name.upper()}",
        f"VOLTS: {volts:,}".replace(",", "'"),
        f"RANK: {rank.upper()}"
    ]

    for key, text in zip(text_style.keys(), texts):
        style = text_style[key]
        # –¢–µ–Ω—å —Ç–µ–∫—Å—Ç–∞
        draw.text(
            (style["position"][0] + 3, style["position"][1] + 3),
            text,
            fill=(0, 0, 0),
            font=ImageFont.truetype("cyber.ttf", style["size"])
        )
        # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç
        draw.text(
            style["position"],
            text,
            fill=style["color"],
            font=ImageFont.truetype("cyber.ttf", style["size"])
        )

    img_byte_arr = io.BytesIO()
    img.save(img_byte_arr, format='PNG', quality=95)
    img_byte_arr.seek(0)
    return img_byte_arr
    
    
def start(update: Update, context: CallbackContext):
    global conn, cursor  # –Ø–≤–Ω–æ–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    try:
        user = update.effective_user
        cursor.execute(
            "INSERT OR IGNORE INTO users VALUES (?, ?, 0, 'user')",
            (user.id, user.first_name),
        )
        conn.commit()
        
        cursor.execute("SELECT volts, rank FROM users WHERE chatid = ?", (user.id,))
        result = cursor.fetchone()
        volts, rank = (result[0], result[1]) if result else (0, 'user')
        
        img_bytes = generate_volts_image(user.first_name, volts, RANKS[rank])
        update.message.reply_photo(
            photo=InputFile(img_bytes, filename="core_profile.png"),
            caption=f"‚ñ£ OPERATOR: {user.first_name}\n‚ñ† PROTOCOL: NEON-{RANKS[rank].upper()}",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("‚ö° CHARGE CORE"), KeyboardButton("üéñÔ∏è CYBER RANKING")]], 
                resize_keyboard=True
            )
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ /start: {e}")

def handle_message(update: Update, context: CallbackContext):
    user = update.effective_user
    text = update.message.text
    
    if user.id == ADMIN_ID and text == "admin":
        update.message.reply_text(f"ID –∞–¥–º–∏–Ω–∞: {ADMIN_ID}\nID –∫–æ–Ω—Ñ–∏–≥–∞: {CONFIG_ID}")
        return
    
    if text == "‚ö° CHARGE CORE":
        cursor.execute("SELECT volts FROM users WHERE chatid = ?", (user.id,))
        result = cursor.fetchone()
        volts = result[0] + 1 if result else 1
        
        cursor.execute(
            "UPDATE users SET volts = ? WHERE chatid = ?", 
            (volts, user.id)
        )
        conn.commit()
        update.message.reply_text(
            f"‚ñ£ CORE OVERDRIVE!\n"
            f"VOLTS: {volts} VT\n"
            f"STATUS: {['‚ñ†'*i + '‚ñ°'*(10 - i) for i in range(11)][min(volts // 100, 10)]}"
        )
        
    elif text == "üéñÔ∏è CYBER RANKING":  # <-- –ò—Å–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç—Å—Ç—É–ø!
        try:
            cursor.execute("SELECT name, volts, rank FROM users ORDER BY volts DESC LIMIT 10")
            top = cursor.fetchall()
            
            if not top:
                update.message.reply_text("‚ñ£ CYBER RANKING SYSTEM\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
                return
            
            response = f"‚ñ£ CYBER RANKING SYSTEM\n{'-'*70}\n"
            for i, (name, vt, rank) in enumerate(top, 1):
                rank_display = RANKS.get(rank, "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–∞–Ω–≥")[:10]
                response += f"‚ñå{i:02d}‚îÇ {name[:10]:<10} ‚îÇ {vt:07d}VT ‚îÇ {rank_display:<10}‚ñå\n"
            
            update.message.reply_text(f"```\n{response}\n```", parse_mode="MarkdownV2")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ CYBER RANKING: {e}")
            update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–π—Ç–∏–Ω–≥–∞")
        
        
if __name__ == "__main__":
    updater = Updater(TOKEN, use_context=True)
    dp = updater.dispatcher
    dp.add_handler(CommandHandler("start", start))
    dp.add_handler(MessageHandler(Filters.text, handle_message))
    
    # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
    jq = updater.job_queue
    jq.run_repeating(backup_data, interval=30, first=10)
    
    updater.start_polling()
    updater.idle()